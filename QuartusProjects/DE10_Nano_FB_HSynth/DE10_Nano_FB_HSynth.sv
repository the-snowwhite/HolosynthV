//`default_nettype none
//`default_nettype wire
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================
// Synthesizer
`define _CycloneV
`define _Synth
`define _24BitAudio

module DE10_Nano_FB_HSynth(

    //////////// CLOCK //////////
    input 		          		FPGA_CLK1_50,
    input 		          		FPGA_CLK2_50,
    input 		          		FPGA_CLK3_50,

    //////////// HDMI //////////
    inout 		          		HDMI_I2C_SCL,
    inout 		          		HDMI_I2C_SDA,
    inout 		          		HDMI_I2S,
    inout 		          		HDMI_LRCLK,
    inout 		          		HDMI_MCLK,
    inout 		          		HDMI_SCLK,
    output		          		HDMI_TX_CLK,
    output		    [23:0]		HDMI_TX_D,
    output		          		HDMI_TX_DE,
    output		          		HDMI_TX_HS,
    input 		          		HDMI_TX_INT,
    output		          		HDMI_TX_VS,

    //////////// HPS //////////
    inout 		          		HPS_CONV_USB_N,
    output		    [14:0]		HPS_DDR3_ADDR,
    output		     [2:0]		HPS_DDR3_BA,
    output		          		HPS_DDR3_CAS_N,
    output		          		HPS_DDR3_CK_N,
    output		          		HPS_DDR3_CK_P,
    output		          		HPS_DDR3_CKE,
    output		          		HPS_DDR3_CS_N,
    output		     [3:0]		HPS_DDR3_DM,
    inout 		    [31:0]		HPS_DDR3_DQ,
    inout 		     [3:0]		HPS_DDR3_DQS_N,
    inout 		     [3:0]		HPS_DDR3_DQS_P,
    output		          		HPS_DDR3_ODT,
    output		          		HPS_DDR3_RAS_N,
    output		          		HPS_DDR3_RESET_N,
    input 		          		HPS_DDR3_RZQ,
    output		          		HPS_DDR3_WE_N,
    output		          		HPS_ENET_GTX_CLK,
    inout 		          		HPS_ENET_INT_N,
    output		          		HPS_ENET_MDC,
    inout 		          		HPS_ENET_MDIO,
    input 		          		HPS_ENET_RX_CLK,
    input 		     [3:0]		HPS_ENET_RX_DATA,
    input 		          		HPS_ENET_RX_DV,
    output		     [3:0]		HPS_ENET_TX_DATA,
    output		          		HPS_ENET_TX_EN,
    inout 		          		HPS_GSENSOR_INT,
    inout 		          		HPS_I2C0_SCLK,
    inout 		          		HPS_I2C0_SDAT,
    inout 		          		HPS_I2C1_SCLK,
    inout 		          		HPS_I2C1_SDAT,
    inout 		          		HPS_KEY,
    inout 		          		HPS_LED,
    inout 		          		HPS_LTC_GPIO,
    output		          		HPS_SD_CLK,
    inout 		          		HPS_SD_CMD,
    inout 		     [3:0]		HPS_SD_DATA,
    output		          		HPS_SPIM_CLK,
    input 		          		HPS_SPIM_MISO,
    output		          		HPS_SPIM_MOSI,
    inout 		          		HPS_SPIM_SS,
    input 		          		HPS_UART_RX,
    output		          		HPS_UART_TX,
    input 		          		HPS_USB_CLKOUT,
    inout 		     [7:0]		HPS_USB_DATA,
    input 		          		HPS_USB_DIR,
    input 		          		HPS_USB_NXT,
    output		          		HPS_USB_STP,

    //////////// KEY //////////
    input 		     [1:0]		KEY,

    //////////// LED //////////
    output		     [7:0]		LED,

    //////////// SW //////////
    input 		     [3:0]		SW,

    ///////// GPIO /////////
    inout     [35:0]         GPIO_0,
    inout     [35:0]         GPIO_1
);


parameter VOICES = 32;
parameter V_OSC = 8;	// number of oscilators pr. voice.

parameter O_ENVS = 2;	// number of envelope generators pr. oscilator.
parameter V_ENVS = V_OSC * O_ENVS;	// number of envelope generators  pr. voice.
parameter AUD_BIT_DEPTH = 24;


//=======================================================
//  REG/WIRE declarations
//=======================================================
    wire        hps_fpga_reset_n;
    wire [1:0]  fpga_debounced_buttons;
    wire [7:0]  fpga_led_internal;
    wire [2:0]  hps_reset_req;
    wire        hps_cold_reset;
    wire        hps_warm_reset;
    wire        hps_debug_reset;
    wire [27:0] stm_hw_events;
    wire 		fpga_clk_50;
    wire        lcd_clk;

////////////      Midi       //////////

    wire		midi_rxd;
    wire		midi_txd;

    assign 	midi_rxd = SW[0] ? GPIO_1[27] : ~GPIO_1[27];
    assign	GPIO_1[29] = SW[1] ? midi_txd : ~midi_txd;



// connection of internal logics
    assign LED[7:0] = {fpga_led_internal[2:0],~voice_free[3:0],led_level};
    assign fpga_clk_50=FPGA_CLK1_50;
    assign stm_hw_events    = {{15{1'b0}}, SW, fpga_led_internal, fpga_debounced_buttons};

    wire [9:0]	cpu_adr;
    wire 		cpu_write;
    wire		cpu_read;
    wire		cpu_chip_sel;
    wire [31:0]	cpu_data_out;
    wire [31:0]	cpu_data_in;
    wire 		synth_irq_n;
    assign 		synth_irq_n = 1'b1;
    wire [2:0]	socmidi_addr;
    wire 		socmidi_write;
    wire		socmidi_read;
    wire		socmidi_chip_sel;
    wire [7:0]	socmidi_data_out;
    wire [7:0]	socmidi_data_in;
    wire 		socmidi_irq_n;

    wire        AUD_BCLK;
    wire        AUD_DACDAT;
    wire        AUD_DACLRCK;
    logic       AUDIO_CLK;
    wire        AUD_XCK;

    logic [AUD_BIT_DEPTH-1:0] lsound_out;
    logic [AUD_BIT_DEPTH-1:0] rsound_out;
    logic        xxxx_zero;
    bit          playback_lrclk,playback_bclk,i2s_enable,trig;
    bit          i2s_audio_clk;

//=======================================================
//  Structural coding
//=======================================================

I2C_HDMI_Config u_I2C_HDMI_Config (
    .iCLK(fpga_clk_50),
    .iRST_N( 1'b1),
    .I2C_SCLK(HDMI_I2C_SCL),
    .I2C_SDAT(HDMI_I2C_SDA),
    .HDMI_TX_INT(HDMI_TX_INT)
    );

    assign HDMI_TX_CLK = lcd_clk;

soc_system u0 (
        //Clock&Reset
    .clk_clk                               (fpga_clk_50 ),
    .reset_reset_n                         (hps_fpga_reset_n ),
    .alt_vip_cl_cvo_vid_data               (HDMI_TX_D ),
    .alt_vip_cl_cvo_underflow              ( ),
    .alt_vip_cl_cvo_vid_datavalid          (HDMI_TX_DE),
    .alt_vip_cl_cvo_vid_v_sync             (HDMI_TX_VS ),
    .alt_vip_cl_cvo_vid_h_sync             (HDMI_TX_HS ),
    .alt_vip_cl_cvo_vid_f                  ( ),
    .alt_vip_cl_cvo_vid_h                  ( ),
    .alt_vip_cl_cvo_vid_v                  ( ),
    .audio_clk                             (AUDIO_CLK),
    .button_pio_export                     (fpga_debounced_buttons), // button_pio_external_connection.export
    .holosynth_sysex_uio_dataout           (cpu_data_out),
    .holosynth_sysex_uio_address           (cpu_adr),
    .holosynth_sysex_uio_read              (cpu_read),
    .holosynth_sysex_uio_chipsel           (cpu_chip_sel),
    .holosynth_sysex_uio_datain            (cpu_data_in),
    .holosynth_sysex_uio_write             (cpu_write),
    .holosynth_sysex_uio_int_in_n          (synth_irq_n),
    .holosynth_midi_socmidi_dataout        (socmidi_data_out),
    .holosynth_midi_socmidi_address        (socmidi_addr),
    .holosynth_midi_socmidi_read           (socmidi_read),
    .holosynth_midi_socmidi_chipsel        (socmidi_chip_sel),
    .holosynth_midi_socmidi_datain         (socmidi_data_in),
    .holosynth_midi_socmidi_write          (socmidi_write),
    .holosynth_midi_socmidi_int_in         (socmidi_irq_n),
    .i2s_audio_clk_clk                     (i2s_audio_clk),
    .holosynth_audio_con_int_in            (),
    .holosynth_audio_con_xxxx_zero         (xxxx_zero),
    .holosynth_audio_con_xxxx_top          (xxxx_top),
    .holosynth_audio_con_lrck              (playback_lrclk),
    .holosynth_audio_con_run               (run),
    .holosynth_audio_con_lsound_in         (lsound_out),
    .holosynth_audio_con_rsound_in         (rsound_out),
    .holosynth_audio_con_trig              (trig),
    .holosynth_audio_con_i2s_enable        (i2s_enable),
   .lcd_clk_clk                           (lcd_clk),
    .pll_stream_locked_export              (),      // out
    //HPS ddr3
    .memory_mem_a                          ( HPS_DDR3_ADDR), //                memory.mem_a
    .memory_mem_ba                         ( HPS_DDR3_BA),   //                .mem_ba
    .memory_mem_ck                         ( HPS_DDR3_CK_P), //                .mem_ck
    .memory_mem_ck_n                       ( HPS_DDR3_CK_N), //                .mem_ck_n
    .memory_mem_cke                        ( HPS_DDR3_CKE),  //                .mem_cke
    .memory_mem_cs_n                       ( HPS_DDR3_CS_N), //                .mem_cs_n
    .memory_mem_ras_n                      ( HPS_DDR3_RAS_N),//                .mem_ras_n
    .memory_mem_cas_n                      ( HPS_DDR3_CAS_N),//                .mem_cas_n
    .memory_mem_we_n                       ( HPS_DDR3_WE_N), //                .mem_we_n
    .memory_mem_reset_n                    ( HPS_DDR3_RESET_N),//              .mem_reset_n
    .memory_mem_dq                         ( HPS_DDR3_DQ),   //                .mem_dq
    .memory_mem_dqs                        ( HPS_DDR3_DQS_P),//                .mem_dqs
    .memory_mem_dqs_n                      ( HPS_DDR3_DQS_N),//                .mem_dqs_n
    .memory_mem_odt                        ( HPS_DDR3_ODT),  //                .mem_odt
    .memory_mem_dm                         ( HPS_DDR3_DM),   //                .mem_dm
    .memory_oct_rzqin                      ( HPS_DDR3_RZQ),  //                .oct_rzqin
    //HPS ethernet
    .hps_0_hps_io_hps_io_emac1_inst_TX_CLK ( HPS_ENET_GTX_CLK),       // hps_0_hps_io.hps_io_emac1_inst_TX_CLK
    .hps_0_hps_io_hps_io_emac1_inst_TXD0   ( HPS_ENET_TX_DATA[0] ),   // hps_io_emac1_inst_TXD0
    .hps_0_hps_io_hps_io_emac1_inst_TXD1   ( HPS_ENET_TX_DATA[1] ),   // hps_io_emac1_inst_TXD1
    .hps_0_hps_io_hps_io_emac1_inst_TXD2   ( HPS_ENET_TX_DATA[2] ),   // hps_io_emac1_inst_TXD2
    .hps_0_hps_io_hps_io_emac1_inst_TXD3   ( HPS_ENET_TX_DATA[3] ),   // hps_io_emac1_inst_TXD3
    .hps_0_hps_io_hps_io_emac1_inst_RXD0   ( HPS_ENET_RX_DATA[0] ),   // hps_io_emac1_inst_RXD0
    .hps_0_hps_io_hps_io_emac1_inst_MDIO   ( HPS_ENET_MDIO ),         // hps_io_emac1_inst_MDIO
    .hps_0_hps_io_hps_io_emac1_inst_MDC    ( HPS_ENET_MDC  ),         // hps_io_emac1_inst_MDC
    .hps_0_hps_io_hps_io_emac1_inst_RX_CTL ( HPS_ENET_RX_DV),         // hps_io_emac1_inst_RX_CTL
    .hps_0_hps_io_hps_io_emac1_inst_TX_CTL ( HPS_ENET_TX_EN),         // hps_io_emac1_inst_TX_CTL
    .hps_0_hps_io_hps_io_emac1_inst_RX_CLK ( HPS_ENET_RX_CLK),        // hps_io_emac1_inst_RX_CLK
    .hps_0_hps_io_hps_io_emac1_inst_RXD1   ( HPS_ENET_RX_DATA[1] ),   // hps_io_emac1_inst_RXD1
    .hps_0_hps_io_hps_io_emac1_inst_RXD2   ( HPS_ENET_RX_DATA[2] ),   // hps_io_emac1_inst_RXD2
    .hps_0_hps_io_hps_io_emac1_inst_RXD3   ( HPS_ENET_RX_DATA[3] ),   // hps_io_emac1_inst_RXD3
    //HPS SD card
    .hps_0_hps_io_hps_io_sdio_inst_CMD     ( HPS_SD_CMD    ),           // .hps_io_sdio_inst_CMD
    .hps_0_hps_io_hps_io_sdio_inst_D0      ( HPS_SD_DATA[0]     ),      // .hps_io_sdio_inst_D0
    .hps_0_hps_io_hps_io_sdio_inst_D1      ( HPS_SD_DATA[1]     ),      // .hps_io_sdio_inst_D1
    .hps_0_hps_io_hps_io_sdio_inst_CLK     ( HPS_SD_CLK   ),            // .hps_io_sdio_inst_CLK
    .hps_0_hps_io_hps_io_sdio_inst_D2      ( HPS_SD_DATA[2]     ),      // .hps_io_sdio_inst_D2
    .hps_0_hps_io_hps_io_sdio_inst_D3      ( HPS_SD_DATA[3]     ),      // .hps_io_sdio_inst_D3
    //HPS USB
    .hps_0_hps_io_hps_io_usb1_inst_D0      ( HPS_USB_DATA[0]    ),      // .hps_io_usb1_inst_D0
    .hps_0_hps_io_hps_io_usb1_inst_D1      ( HPS_USB_DATA[1]    ),      // .hps_io_usb1_inst_D1
    .hps_0_hps_io_hps_io_usb1_inst_D2      ( HPS_USB_DATA[2]    ),      // .hps_io_usb1_inst_D2
    .hps_0_hps_io_hps_io_usb1_inst_D3      ( HPS_USB_DATA[3]    ),      // .hps_io_usb1_inst_D3
    .hps_0_hps_io_hps_io_usb1_inst_D4      ( HPS_USB_DATA[4]    ),      // .hps_io_usb1_inst_D4
    .hps_0_hps_io_hps_io_usb1_inst_D5      ( HPS_USB_DATA[5]    ),      // .hps_io_usb1_inst_D5
    .hps_0_hps_io_hps_io_usb1_inst_D6      ( HPS_USB_DATA[6]    ),      // .hps_io_usb1_inst_D6
    .hps_0_hps_io_hps_io_usb1_inst_D7      ( HPS_USB_DATA[7]    ),      // .hps_io_usb1_inst_D7
    .hps_0_hps_io_hps_io_usb1_inst_CLK     ( HPS_USB_CLKOUT    ),       // .hps_io_usb1_inst_CLK
    .hps_0_hps_io_hps_io_usb1_inst_STP     ( HPS_USB_STP    ),          // .hps_io_usb1_inst_STP
    .hps_0_hps_io_hps_io_usb1_inst_DIR     ( HPS_USB_DIR    ),          // .hps_io_usb1_inst_DIR
    .hps_0_hps_io_hps_io_usb1_inst_NXT     ( HPS_USB_NXT    ),          // .hps_io_usb1_inst_NXT
        //HPS SPI
    .hps_0_hps_io_hps_io_spim1_inst_CLK    ( HPS_SPIM_CLK  ),           // .hps_io_spim1_inst_CLK
    .hps_0_hps_io_hps_io_spim1_inst_MOSI   ( HPS_SPIM_MOSI ),           // .hps_io_spim1_inst_MOSI
    .hps_0_hps_io_hps_io_spim1_inst_MISO   ( HPS_SPIM_MISO ),           // .hps_io_spim1_inst_MISO
    .hps_0_hps_io_hps_io_spim1_inst_SS0    ( HPS_SPIM_SS   ),             // .hps_io_spim1_inst_SS0
        //HPS UART
    .hps_0_hps_io_hps_io_uart0_inst_RX     ( HPS_UART_RX   ),          // .hps_io_uart0_inst_RX
    .hps_0_hps_io_hps_io_uart0_inst_TX     ( HPS_UART_TX   ),          // .hps_io_uart0_inst_TX
        //HPS I2C1
    .hps_0_hps_io_hps_io_i2c0_inst_SDA     ( HPS_I2C0_SDAT  ),        // .hps_io_i2c0_inst_SDA
    .hps_0_hps_io_hps_io_i2c0_inst_SCL     ( HPS_I2C0_SCLK  ),        // .hps_io_i2c0_inst_SCL
        //HPS I2C2
    .hps_0_hps_io_hps_io_i2c1_inst_SDA     ( HPS_I2C1_SDAT  ),        // .hps_io_i2c1_inst_SDA
    .hps_0_hps_io_hps_io_i2c1_inst_SCL     ( HPS_I2C1_SCLK  ),        // .hps_io_i2c1_inst_SCL
        //GPIO
    .hps_0_hps_io_hps_io_gpio_inst_GPIO09  ( HPS_CONV_USB_N ),  // .hps_io_gpio_inst_GPIO09
    .hps_0_hps_io_hps_io_gpio_inst_GPIO35  ( HPS_ENET_INT_N ),  // .hps_io_gpio_inst_GPIO35
    .hps_0_hps_io_hps_io_gpio_inst_GPIO40  ( HPS_LTC_GPIO   ),  // .hps_io_gpio_inst_GPIO40
    .hps_0_hps_io_hps_io_gpio_inst_GPIO53  ( HPS_LED   ),  // .hps_io_gpio_inst_GPIO53
    .hps_0_hps_io_hps_io_gpio_inst_GPIO54  ( HPS_KEY   ),  // .hps_io_gpio_inst_GPIO54
    .hps_0_hps_io_hps_io_gpio_inst_GPIO61  ( HPS_GSENSOR_INT ),  // .hps_io_gpio_inst_GPIO61
        //FPGA Partion
    .led_pio_export                        ( fpga_led_internal ),    //    led_pio_external_connection.export
    .dipsw_pio_export                      ( SW	),  //  dipsw_pio_external_connection.export
    .hps_0_h2f_reset_reset_n               ( hps_fpga_reset_n ),                //                hps_0_h2f_reset.reset_n
    .hps_0_f2h_cold_reset_req_reset_n      (~hps_cold_reset ),      //       hps_0_f2h_cold_reset_req.reset_n
    .hps_0_f2h_debug_reset_req_reset_n     (~hps_debug_reset ),     //      hps_0_f2h_debug_reset_req.reset_n
    .hps_0_f2h_stm_hw_events_stm_hwevents  (stm_hw_events ),  //        hps_0_f2h_stm_hw_events.stm_hwevents
    .hps_0_f2h_warm_reset_req_reset_n      (~hps_warm_reset )      //       hps_0_f2h_warm_reset_req.reset_n
);

audio_i2s_timing_gen audio_i2s_timing_gen_inst
(
	.aud_44_in_clk(i2s_audio_clk) ,	// input  aud_44_in_clk_sig
	.reset_n(hps_fpga_reset_n) ,	// input  reset_n_sig
	.ext_AUD_BCLK(AUD_BCLK) ,	// output  ext_AUD_BCLK_sig
	.ext_AUD_DACLRCLK(AUD_DACLRCK) ,	// output  ext_AUD_DACLRCLK_sig
	.playback_lrclk(playback_lrclk) ,	// output  playback_lrclk_sig
	.playback_bclk(playback_bclk) 	// output  playback_bclk_sig
);

audio_i2s_driver audio_i2s_driver_inst
(
	.reset_reg_N(hps_fpga_reset_n) ,	// input  reset_reg_N_sig
	.iAUD_DACLRCK(playback_lrclk) ,	// input  iAUD_DACLRCK_sig
	.iAUDB_CLK(playback_bclk) ,	// input  iAUDB_CLK_sig
	.i2s_enable(i2s_enable) ,	// input  i2s_enable_sig
	.i_lsound_out(lsound_out) ,	// input [AUD_BIT_DEPTH-1:0] i_lsound_out_sig
	.i_rsound_out(rsound_out) ,	// input [AUD_BIT_DEPTH-1:0] i_rsound_out_sig
	.oAUD_DACDAT(AUD_DACDAT) 	// output  oAUD_DACDAT_sig
);

defparam audio_i2s_driver_inst.AUD_BIT_DEPTH = 24;

// Debounce logic to clean out glitches within 1ms
debounce debounce_inst (
.clk                                  (fpga_clk_50),
.reset_n                              (hps_fpga_reset_n),
.data_in                              (KEY),
.data_out                             (fpga_debounced_buttons)
);
defparam debounce_inst.WIDTH = 2;
defparam debounce_inst.POLARITY = "LOW";
defparam debounce_inst.TIMEOUT = 50000;               // at 50Mhz this is a debounce time of 1ms
defparam debounce_inst.TIMEOUT_WIDTH = 16;            // ceil(log2(TIMEOUT))

// Source/Probe megawizard instance
hps_reset hps_reset_inst (
.source_clk (fpga_clk_50),
.source     (hps_reset_req)
);

altera_edge_detector pulse_cold_reset (
.clk       (fpga_clk_50),
.rst_n     (hps_fpga_reset_n),
.signal_in (hps_reset_req[0]),
.pulse_out (hps_cold_reset)
);
defparam pulse_cold_reset.PULSE_EXT = 6;
defparam pulse_cold_reset.EDGE_TYPE = 1;
defparam pulse_cold_reset.IGNORE_RST_WHILE_BUSY = 1;

altera_edge_detector pulse_warm_reset (
.clk       (fpga_clk_50),
.rst_n     (hps_fpga_reset_n),
.signal_in (hps_reset_req[1]),
.pulse_out (hps_warm_reset)
);
defparam pulse_warm_reset.PULSE_EXT = 2;
defparam pulse_warm_reset.EDGE_TYPE = 1;
defparam pulse_warm_reset.IGNORE_RST_WHILE_BUSY = 1;

altera_edge_detector pulse_debug_reset (
.clk       (fpga_clk_50),
.rst_n     (hps_fpga_reset_n),
.signal_in (hps_reset_req[2]),
.pulse_out (hps_debug_reset)
);
defparam pulse_debug_reset.PULSE_EXT = 32;
defparam pulse_debug_reset.EDGE_TYPE = 1;
defparam pulse_debug_reset.IGNORE_RST_WHILE_BUSY = 1;

reg [25:0] counter;
reg  led_level;
always @	(posedge fpga_clk_50 or negedge hps_fpga_reset_n)
begin
if(~hps_fpga_reset_n)
begin
        counter<=0;
        led_level<=0;
end

else if(counter==24999999)
    begin
        counter<=0;
        led_level<=~led_level;
    end
else
        counter<=counter+1'b1;
end
// ----------------------------------------------------------------------//
// 							Synthesizer:
// ----------------------------------------------------------------------//

//    assign GPIO_1[9] =	AUD_XCK;        // violet
    assign GPIO_1[7] =	AUD_BCLK;       // orange
    assign GPIO_1[5] =	AUD_DACLRCK;    // green
    assign GPIO_1[3] =	AUD_DACDAT;     // white



/////// LED Display ////////
    wire  [VOICES-1:0]	voice_free;

    reg [7:0]   delay_1;
    wire        iRST_n;
    wire        run;
    assign GPIO_1[0] = run;

synthesizer #(.AUD_BIT_DEPTH(AUD_BIT_DEPTH),.VOICES(VOICES),.V_OSC(V_OSC),.O_ENVS(O_ENVS))  synthesizer_inst(
    .reg_clk               (fpga_clk_50),
    .AUDIO_CLK             (AUDIO_CLK),     // input
    .reset_reg_n           (hps_fpga_reset_n),
    .reset_data_n          (hps_fpga_reset_n),// input  io_reset_sig
    .trig                  (trig),
    .MIDI_Rx_DAT           (midi_rxd),// input  MIDI_DAT_sig (inverted due to inverter in rs232 chip)
    .midi_txd              (midi_txd),// output midi transmit sig (inverted due to inverter in rs232 chip)
    .button                ( KEY ),      //  Button[3:0]
    .active_keys           (voice_free), //  Red LED [4:1]
`ifdef _Synth
    .lsound_out            (lsound_out),    //  Audio Raw Data Low
    .rsound_out            (rsound_out),    //  Audio Raw Data high
    .xxxx_zero             (xxxx_zero),     // output  cycle complete signal
    .xxxx_top              (xxxx_top),      // output  cycle complete signal
`endif
//    .keys_on               (keys_on),	    //  LED [7:0]
//    .voice_free            (voice_free) , //  Red LED [4:1]
    .cpu_read              (cpu_read) ,	    // input  cpu_read_sig
    .cpu_write             (cpu_write) ,	// input  cpu_write_sig
    .chipselect            (cpu_chip_sel) ,	// input  chipselect_sig
    .address               (cpu_adr) ,	    // input [9:0] address_sig
    .cpu_readdata          (cpu_data_out) ,	// input [31:0] writedata_sig
    .cpu_writedata         (cpu_data_in), 	// output [31:0] readdata_sig
    .socmidi_read          (socmidi_read) ,	// input  cpu_read_sig
    .socmidi_write         (socmidi_write), // input  cpu_write_sig
//    .socmidi_cs            (socmidi_chip_sel) ,	// input  chipselect_sig
    .socmidi_addr          (socmidi_addr) ,	// input [9:0] address_sig
    .socmidi_data_out      (socmidi_data_in),	// input [31:0] writedata_sig
    .socmidi_data_in       (socmidi_data_out), 	// output [31:0] readdata_sig
    .run                   (run)
);

endmodule
