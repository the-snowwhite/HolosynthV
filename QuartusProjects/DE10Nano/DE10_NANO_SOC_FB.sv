//`default_nettype none
//`default_nettype wire
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================
// Synthesizer
`define _CycloneV
`define _Synth
`define _24BitAudio

module DE10_NANO_SOC_FB(

    //////////// CLOCK //////////
    input 		          		FPGA_CLK1_50,
    input 		          		FPGA_CLK2_50,
    input 		          		FPGA_CLK3_50,

    //////////// HDMI //////////
    inout 		          		HDMI_I2C_SCL,
    inout 		          		HDMI_I2C_SDA,
    inout 		          		HDMI_I2S,
    inout 		          		HDMI_LRCLK,
    inout 		          		HDMI_MCLK,
    inout 		          		HDMI_SCLK,
    output		          		HDMI_TX_CLK,
    output		    [23:0]		HDMI_TX_D,
    output		          		HDMI_TX_DE,
    output		          		HDMI_TX_HS,
    input 		          		HDMI_TX_INT,
    output		          		HDMI_TX_VS,

    //////////// HPS //////////
    inout 		          		HPS_CONV_USB_N,
    output		    [14:0]		HPS_DDR3_ADDR,
    output		     [2:0]		HPS_DDR3_BA,
    output		          		HPS_DDR3_CAS_N,
    output		          		HPS_DDR3_CK_N,
    output		          		HPS_DDR3_CK_P,
    output		          		HPS_DDR3_CKE,
    output		          		HPS_DDR3_CS_N,
    output		     [3:0]		HPS_DDR3_DM,
    inout 		    [31:0]		HPS_DDR3_DQ,
    inout 		     [3:0]		HPS_DDR3_DQS_N,
    inout 		     [3:0]		HPS_DDR3_DQS_P,
    output		          		HPS_DDR3_ODT,
    output		          		HPS_DDR3_RAS_N,
    output		          		HPS_DDR3_RESET_N,
    input 		          		HPS_DDR3_RZQ,
    output		          		HPS_DDR3_WE_N,
    output		          		HPS_ENET_GTX_CLK,
    inout 		          		HPS_ENET_INT_N,
    output		          		HPS_ENET_MDC,
    inout 		          		HPS_ENET_MDIO,
    input 		          		HPS_ENET_RX_CLK,
    input 		     [3:0]		HPS_ENET_RX_DATA,
    input 		          		HPS_ENET_RX_DV,
    output		     [3:0]		HPS_ENET_TX_DATA,
    output		          		HPS_ENET_TX_EN,
    inout 		          		HPS_GSENSOR_INT,
    inout 		          		HPS_I2C0_SCLK,
    inout 		          		HPS_I2C0_SDAT,
    inout 		          		HPS_I2C1_SCLK,
    inout 		          		HPS_I2C1_SDAT,
    inout 		          		HPS_KEY,
    inout 		          		HPS_LED,
    inout 		          		HPS_LTC_GPIO,
    output		          		HPS_SD_CLK,
    inout 		          		HPS_SD_CMD,
    inout 		     [3:0]		HPS_SD_DATA,
    output		          		HPS_SPIM_CLK,
    input 		          		HPS_SPIM_MISO,
    output		          		HPS_SPIM_MOSI,
    inout 		          		HPS_SPIM_SS,
    input 		          		HPS_UART_RX,
    output		          		HPS_UART_TX,
    input 		          		HPS_USB_CLKOUT,
    inout 		     [7:0]		HPS_USB_DATA,
    input 		          		HPS_USB_DIR,
    input 		          		HPS_USB_NXT,
    output		          		HPS_USB_STP,

    //////////// KEY //////////
    input 		     [1:0]		KEY,

    //////////// LED //////////
    output		     [7:0]		LED,

    //////////// SW //////////
    input 		     [3:0]		SW,

    ///////// GPIO /////////
    inout     [35:0]         GPIO_0,
    inout     [35:0]         GPIO_1
);



//=======================================================
//  REG/WIRE declarations
//=======================================================
    wire        hps_fpga_reset_n;
    wire [1:0]  fpga_debounced_buttons;
    wire [7:0]  fpga_led_internal;
    wire [2:0]  hps_reset_req;
    wire        hps_cold_reset;
    wire        hps_warm_reset;
    wire        hps_debug_reset;
    wire [27:0] stm_hw_events;
    wire 		fpga_clk_50;
    wire        lcd_clk;
//
//     wire [7:0]         vid_r,vid_g,vid_b;
//     wire               vid_v_sync ;
//     wire               vid_h_sync ;
//     wire               vid_datavalid;
//
//     assign {vid_r,vid_g,vid_b} = HDMI_TX_D;
//     assign vid_datavalid = HDMI_TX_DE;
//     assign vid_v_sync = HDMI_TX_VS;
//     assign vid_h_sync = HDMI_TX_HS;

    //////////// GPIO - 15" LCD  //////////

//     wire	[7:0]	LCD_B;
//     wire			LCD_DCLK;
//     wire	[7:0]	LCD_G;
//     wire			LCD_HSD;
//     wire	[7:0]	LCD_R;
//     wire			LCD_DE;
//     wire			LCD_VSD;
//
//     assign GPIO_0[28:22]	= LCD_B[7:1];
//     assign GPIO_0[20]		= LCD_B[0];
//     assign GPIO_0[21]		= LCD_G[7];
//     assign GPIO_0[19:18]	= LCD_G[6:5];
//     assign GPIO_0[15:11]	= LCD_G[4:0];
//     assign GPIO_0[10:3]		= LCD_R;
//     assign GPIO_0[1]		= LCD_DCLK;
//     assign GPIO_0[30]		= LCD_HSD;
//     assign GPIO_0[35]		= LCD_DE;
//     assign GPIO_0[31]		= LCD_VSD;
//
//     assign {LCD_R,LCD_G,LCD_B}	= {vid_r,vid_g,vid_b};
//     assign LCD_DCLK 			= lcd_clk;
//     assign LCD_HSD				= ~vid_h_sync;
//     assign LCD_VSD				= ~vid_v_sync;
//     assign LCD_DE				= vid_datavalid;

////////////      Midi       //////////

    wire		midi_rxd;
    wire		midi_txd;

    assign 	midi_rxd = SW[0] ? GPIO_1[27] : ~GPIO_1[27];
    assign	GPIO_1[29] = SW[1] ? midi_txd : ~midi_txd;



//wire               clk_150;
// connection of internal logics
//	assign LED[7:0] = fpga_led_internal | {7'b0000000, led_level};
    assign LED[0] = led_level;
    assign fpga_clk_50=FPGA_CLK1_50;
    assign stm_hw_events    = {{15{1'b0}}, SW, fpga_led_internal, fpga_debounced_buttons};

    wire [9:0]	cpu_adr;
    wire 		cpu_write;
    wire		cpu_read;
    wire		cpu_chip_sel;
    wire [31:0]	cpu_data_out;
    wire [31:0]	cpu_data_in;
    wire 		synth_irq_n;
    assign 		synth_irq_n = 1'b1;
    wire [2:0]	socmidi_addr;
    wire 		socmidi_write;
    wire		socmidi_read;
    wire		socmidi_chip_sel;
    wire [7:0]	socmidi_data_out;
    wire [7:0]	socmidi_data_in;
    wire 		socmidi_irq_n;

    wire        AUD_BCLK;
    wire        AUD_DACDAT;
    wire        AUD_DACLRCK;
    logic       AUDIO_CLK;
    wire        AUD_XCK;

    logic [31:0] lsound_out;
    logic [31:0] rsound_out;
    logic [31:0] lsound_mixed_out;
    logic [31:0] rsound_mixed_out;
    logic        xxxx_zero;
    logic [31:0] i2s_output_apb_0_playback_fifo_data_R;
    logic [31:0] i2s_output_apb_0_playback_fifo_data_L;
    logic        i2s_playback_fifo_ack;
    logic        i2s_output_apb_0_playback_fifo_empty;
    logic        i2s_playback_enable;
    logic        playback_enable;
    logic        fifo_ready;
//    logic        i2s_output_apb_0_capture_fifo_full;
//    logic        i2s_capture_enable;
    bit          i2s_clkctrl_apb_0_conduit_bclk;
    bit          i2s_clk;

//=======================================================
//  Structural coding
//=======================================================

I2C_HDMI_Config u_I2C_HDMI_Config (
    .iCLK(FPGA_CLK1_50),
    .iRST_N( 1'b1),
    .I2C_SCLK(HDMI_I2C_SCL),
    .I2C_SDAT(HDMI_I2C_SDA),
    .HDMI_TX_INT(HDMI_TX_INT)
    );

    assign HDMI_TX_CLK = lcd_clk;

soc_system u0 (
        //Clock&Reset
    .clk_clk                                     (FPGA_CLK1_50 ),
    .reset_reset_n                               (hps_fpga_reset_n ),
    .alt_vip_cl_cvo_0_clocked_video_vid_clk       (lcd_clk ),
    .alt_vip_cl_cvo_0_clocked_video_vid_data      (HDMI_TX_D ),
    .alt_vip_cl_cvo_0_clocked_video_underflow     ( ),
    .alt_vip_cl_cvo_0_clocked_video_vid_datavalid (HDMI_TX_DE),
    .alt_vip_cl_cvo_0_clocked_video_vid_v_sync    (HDMI_TX_VS ),
    .alt_vip_cl_cvo_0_clocked_video_vid_h_sync    (HDMI_TX_HS ),
    .alt_vip_cl_cvo_0_clocked_video_vid_f         ( ),
    .alt_vip_cl_cvo_0_clocked_video_vid_h         ( ),
    .alt_vip_cl_cvo_0_clocked_video_vid_v         ( ),
    .synthreg_io_uio_dataout                   (cpu_data_out),
    .synthreg_io_uio_address                   (cpu_adr),
    .synthreg_io_uio_read                      (cpu_read),
    .synthreg_io_uio_chipsel                   (cpu_chip_sel),
    .synthreg_io_uio_datain                    (cpu_data_in),
    .synthreg_io_uio_write                     (cpu_write),
    .synthreg_io_uio_int_in_n                  (synth_irq_n),
    .socmidi_io_socmidi_dataout                (socmidi_data_out),
    .socmidi_io_socmidi_address                (socmidi_addr),
    .socmidi_io_socmidi_read                   (socmidi_read),
    .socmidi_io_socmidi_chipsel                (socmidi_chip_sel),
    .socmidi_io_socmidi_datain                 (socmidi_data_in),
    .socmidi_io_socmidi_write                  (socmidi_write),
    .socmidi_io_socmidi_int_in                 (socmidi_irq_n),
    .i2s_clkctrl_api_0_conduit_aud_daclrclk                 (AUD_DACLRCK),
    .i2s_clkctrl_api_0_conduit_aud_bclk                     (AUD_BCLK),
    .i2s_clkctrl_api_0_conduit_bclk                         (i2s_clkctrl_apb_0_conduit_bclk),
    .i2s_clkctrl_api_0_conduit_aud_adclrclk                 (AUD_ADCLRCK),
    .i2s_clkctrl_api_0_mclk_clk                             (AUD_XCK),
    .i2s_clkctrl_api_0_i2s_clk_clk                          (i2s_clk),
    .i2s_output_apb_0_capture_fifo_data                     ({rsound_out[31:0],lsound_out[31:0]}),
    .i2s_output_apb_0_capture_fifo_write                    (xxxx_zero),
    .i2s_output_apb_0_capture_fifo_full                     (),
    .i2s_output_apb_0_capture_fifo_i2s_capture_enable       (),
    .i2s_output_apb_0_capture_fifo_empty                    (),
    .i2s_output_apb_0_playback_fifo_ack                     (i2s_playback_fifo_ack),
    .i2s_output_apb_0_playback_fifo_i2s_playback_enable     (i2s_playback_enable),
    .i2s_output_apb_0_playback_fifo_empty                   (i2s_output_apb_0_playback_fifo_empty),
    .i2s_output_apb_0_playback_fifo_full                    (),
    .i2s_output_apb_0_playback_fifo_data                    ({i2s_output_apb_0_playback_fifo_data_R,i2s_output_apb_0_playback_fifo_data_L}),
    .audio_clk                                              (AUDIO_CLK),
    .lcd_clk_clk                               (lcd_clk),
    .pll_stream_locked_export                  (),      // out
    //HPS ddr3
    .memory_mem_a                          ( HPS_DDR3_ADDR),                       //                memory.mem_a
    .memory_mem_ba                         ( HPS_DDR3_BA),                         //                .mem_ba
    .memory_mem_ck                         ( HPS_DDR3_CK_P),                       //                .mem_ck
    .memory_mem_ck_n                       ( HPS_DDR3_CK_N),                       //                .mem_ck_n
    .memory_mem_cke                        ( HPS_DDR3_CKE),                        //                .mem_cke
    .memory_mem_cs_n                       ( HPS_DDR3_CS_N),                       //                .mem_cs_n
    .memory_mem_ras_n                      ( HPS_DDR3_RAS_N),                      //                .mem_ras_n
    .memory_mem_cas_n                      ( HPS_DDR3_CAS_N),                      //                .mem_cas_n
    .memory_mem_we_n                       ( HPS_DDR3_WE_N),                       //                .mem_we_n
    .memory_mem_reset_n                    ( HPS_DDR3_RESET_N),                    //                .mem_reset_n
    .memory_mem_dq                         ( HPS_DDR3_DQ),                         //                .mem_dq
    .memory_mem_dqs                        ( HPS_DDR3_DQS_P),                      //                .mem_dqs
    .memory_mem_dqs_n                      ( HPS_DDR3_DQS_N),                      //                .mem_dqs_n
    .memory_mem_odt                        ( HPS_DDR3_ODT),                        //                .mem_odt
    .memory_mem_dm                         ( HPS_DDR3_DM),                         //                .mem_dm
    .memory_oct_rzqin                      ( HPS_DDR3_RZQ),                        //                .oct_rzqin
    //HPS ethernet
    .hps_0_hps_io_hps_io_emac1_inst_TX_CLK ( HPS_ENET_GTX_CLK),       //                             hps_0_hps_io.hps_io_emac1_inst_TX_CLK
    .hps_0_hps_io_hps_io_emac1_inst_TXD0   ( HPS_ENET_TX_DATA[0] ),   //                             .hps_io_emac1_inst_TXD0
    .hps_0_hps_io_hps_io_emac1_inst_TXD1   ( HPS_ENET_TX_DATA[1] ),   //                             .hps_io_emac1_inst_TXD1
    .hps_0_hps_io_hps_io_emac1_inst_TXD2   ( HPS_ENET_TX_DATA[2] ),   //                             .hps_io_emac1_inst_TXD2
    .hps_0_hps_io_hps_io_emac1_inst_TXD3   ( HPS_ENET_TX_DATA[3] ),   //                             .hps_io_emac1_inst_TXD3
    .hps_0_hps_io_hps_io_emac1_inst_RXD0   ( HPS_ENET_RX_DATA[0] ),   //                             .hps_io_emac1_inst_RXD0
    .hps_0_hps_io_hps_io_emac1_inst_MDIO   ( HPS_ENET_MDIO ),         //                             .hps_io_emac1_inst_MDIO
    .hps_0_hps_io_hps_io_emac1_inst_MDC    ( HPS_ENET_MDC  ),         //                             .hps_io_emac1_inst_MDC
    .hps_0_hps_io_hps_io_emac1_inst_RX_CTL ( HPS_ENET_RX_DV),         //                             .hps_io_emac1_inst_RX_CTL
    .hps_0_hps_io_hps_io_emac1_inst_TX_CTL ( HPS_ENET_TX_EN),         //                             .hps_io_emac1_inst_TX_CTL
    .hps_0_hps_io_hps_io_emac1_inst_RX_CLK ( HPS_ENET_RX_CLK),        //                             .hps_io_emac1_inst_RX_CLK
    .hps_0_hps_io_hps_io_emac1_inst_RXD1   ( HPS_ENET_RX_DATA[1] ),   //                             .hps_io_emac1_inst_RXD1
    .hps_0_hps_io_hps_io_emac1_inst_RXD2   ( HPS_ENET_RX_DATA[2] ),   //                             .hps_io_emac1_inst_RXD2
    .hps_0_hps_io_hps_io_emac1_inst_RXD3   ( HPS_ENET_RX_DATA[3] ),   //                             .hps_io_emac1_inst_RXD3
    //HPS SD card
    .hps_0_hps_io_hps_io_sdio_inst_CMD     ( HPS_SD_CMD    ),           //                               .hps_io_sdio_inst_CMD
    .hps_0_hps_io_hps_io_sdio_inst_D0      ( HPS_SD_DATA[0]     ),      //                               .hps_io_sdio_inst_D0
    .hps_0_hps_io_hps_io_sdio_inst_D1      ( HPS_SD_DATA[1]     ),      //                               .hps_io_sdio_inst_D1
    .hps_0_hps_io_hps_io_sdio_inst_CLK     ( HPS_SD_CLK   ),            //                               .hps_io_sdio_inst_CLK
    .hps_0_hps_io_hps_io_sdio_inst_D2      ( HPS_SD_DATA[2]     ),      //                               .hps_io_sdio_inst_D2
    .hps_0_hps_io_hps_io_sdio_inst_D3      ( HPS_SD_DATA[3]     ),      //                               .hps_io_sdio_inst_D3
    //HPS USB
    .hps_0_hps_io_hps_io_usb1_inst_D0      ( HPS_USB_DATA[0]    ),      //                               .hps_io_usb1_inst_D0
    .hps_0_hps_io_hps_io_usb1_inst_D1      ( HPS_USB_DATA[1]    ),      //                               .hps_io_usb1_inst_D1
    .hps_0_hps_io_hps_io_usb1_inst_D2      ( HPS_USB_DATA[2]    ),      //                               .hps_io_usb1_inst_D2
    .hps_0_hps_io_hps_io_usb1_inst_D3      ( HPS_USB_DATA[3]    ),      //                               .hps_io_usb1_inst_D3
    .hps_0_hps_io_hps_io_usb1_inst_D4      ( HPS_USB_DATA[4]    ),      //                               .hps_io_usb1_inst_D4
    .hps_0_hps_io_hps_io_usb1_inst_D5      ( HPS_USB_DATA[5]    ),      //                               .hps_io_usb1_inst_D5
    .hps_0_hps_io_hps_io_usb1_inst_D6      ( HPS_USB_DATA[6]    ),      //                               .hps_io_usb1_inst_D6
    .hps_0_hps_io_hps_io_usb1_inst_D7      ( HPS_USB_DATA[7]    ),      //                               .hps_io_usb1_inst_D7
    .hps_0_hps_io_hps_io_usb1_inst_CLK     ( HPS_USB_CLKOUT    ),       //                               .hps_io_usb1_inst_CLK
    .hps_0_hps_io_hps_io_usb1_inst_STP     ( HPS_USB_STP    ),          //                               .hps_io_usb1_inst_STP
    .hps_0_hps_io_hps_io_usb1_inst_DIR     ( HPS_USB_DIR    ),          //                               .hps_io_usb1_inst_DIR
    .hps_0_hps_io_hps_io_usb1_inst_NXT     ( HPS_USB_NXT    ),          //                               .hps_io_usb1_inst_NXT
        //HPS SPI
    .hps_0_hps_io_hps_io_spim1_inst_CLK    ( HPS_SPIM_CLK  ),           //                               .hps_io_spim1_inst_CLK
    .hps_0_hps_io_hps_io_spim1_inst_MOSI   ( HPS_SPIM_MOSI ),           //                               .hps_io_spim1_inst_MOSI
    .hps_0_hps_io_hps_io_spim1_inst_MISO   ( HPS_SPIM_MISO ),           //                               .hps_io_spim1_inst_MISO
    .hps_0_hps_io_hps_io_spim1_inst_SS0    ( HPS_SPIM_SS   ),             //                               .hps_io_spim1_inst_SS0
        //HPS UART
    .hps_0_hps_io_hps_io_uart0_inst_RX     ( HPS_UART_RX   ),          //                               .hps_io_uart0_inst_RX
    .hps_0_hps_io_hps_io_uart0_inst_TX     ( HPS_UART_TX   ),          //                               .hps_io_uart0_inst_TX
        //HPS I2C1
    .hps_0_hps_io_hps_io_i2c0_inst_SDA     ( HPS_I2C0_SDAT  ),        //                               .hps_io_i2c0_inst_SDA
    .hps_0_hps_io_hps_io_i2c0_inst_SCL     ( HPS_I2C0_SCLK  ),        //                               .hps_io_i2c0_inst_SCL
        //HPS I2C2
    .hps_0_hps_io_hps_io_i2c1_inst_SDA     ( HPS_I2C1_SDAT  ),        //                               .hps_io_i2c1_inst_SDA
    .hps_0_hps_io_hps_io_i2c1_inst_SCL     ( HPS_I2C1_SCLK  ),        //                               .hps_io_i2c1_inst_SCL
        //GPIO
    .hps_0_hps_io_hps_io_gpio_inst_GPIO09  ( HPS_CONV_USB_N ),  //                               .hps_io_gpio_inst_GPIO09
    .hps_0_hps_io_hps_io_gpio_inst_GPIO35  ( HPS_ENET_INT_N ),  //                               .hps_io_gpio_inst_GPIO35
    .hps_0_hps_io_hps_io_gpio_inst_GPIO40  ( HPS_LTC_GPIO   ),  //                               .hps_io_gpio_inst_GPIO40
    .hps_0_hps_io_hps_io_gpio_inst_GPIO53  ( HPS_LED   ),  //                               .hps_io_gpio_inst_GPIO53
    .hps_0_hps_io_hps_io_gpio_inst_GPIO54  ( HPS_KEY   ),  //                               .hps_io_gpio_inst_GPIO54
    .hps_0_hps_io_hps_io_gpio_inst_GPIO61  ( HPS_GSENSOR_INT ),  //                               .hps_io_gpio_inst_GPIO61
        //FPGA Partion
    .led_pio_external_connection_export    ( fpga_led_internal 	),    //    led_pio_external_connection.export
    .dipsw_pio_external_connection_export  ( SW	),  //  dipsw_pio_external_connection.export
    .button_pio_external_connection_export ( fpga_debounced_buttons	), // button_pio_external_connection.export
    .hps_0_h2f_reset_reset_n               ( hps_fpga_reset_n ),                //                hps_0_h2f_reset.reset_n
    .hps_0_f2h_cold_reset_req_reset_n      (~hps_cold_reset ),      //       hps_0_f2h_cold_reset_req.reset_n
    .hps_0_f2h_debug_reset_req_reset_n     (~hps_debug_reset ),     //      hps_0_f2h_debug_reset_req.reset_n
    .hps_0_f2h_stm_hw_events_stm_hwevents  (stm_hw_events ),  //        hps_0_f2h_stm_hw_events.stm_hwevents
    .hps_0_f2h_warm_reset_req_reset_n      (~hps_warm_reset )      //       hps_0_f2h_warm_reset_req.reset_n
);

    assign rsound_mixed_out = SW[3] ? rsound_out : i2s_output_apb_0_playback_fifo_data_R;
    assign lsound_mixed_out = SW[3] ? lsound_out : i2s_output_apb_0_playback_fifo_data_L;
    assign playback_enable  = SW[3] ? 1'b1 : i2s_playback_enable;
    assign fifo_ready       = SW[3] ? 1'b1 : ~i2s_output_apb_0_playback_fifo_empty;

    i2s_shift_out i2s_shift_out(
        .reset_n            (hps_fpga_reset_n),
        .clk                (i2s_clk),

        .fifo_right_data    (rsound_mixed_out),
        .fifo_left_data     (lsound_mixed_out),
        .fifo_ready         (fifo_ready),
        .fifo_ack           (i2s_playback_fifo_ack),

        .enable             (playback_enable),
        .bclk               (i2s_clkctrl_apb_0_conduit_bclk),
        .lrclk              (AUD_DACLRCK),
        .data_out           (AUD_DACDAT)
    );

// Debounce logic to clean out glitches within 1ms
debounce debounce_inst (
.clk                                  (fpga_clk_50),
.reset_n                              (hps_fpga_reset_n),
.data_in                              (KEY),
.data_out                             (fpga_debounced_buttons)
);
defparam debounce_inst.WIDTH = 2;
defparam debounce_inst.POLARITY = "LOW";
defparam debounce_inst.TIMEOUT = 50000;               // at 50Mhz this is a debounce time of 1ms
defparam debounce_inst.TIMEOUT_WIDTH = 16;            // ceil(log2(TIMEOUT))

// Source/Probe megawizard instance
hps_reset hps_reset_inst (
.source_clk (fpga_clk_50),
.source     (hps_reset_req)
);

altera_edge_detector pulse_cold_reset (
.clk       (fpga_clk_50),
.rst_n     (hps_fpga_reset_n),
.signal_in (hps_reset_req[0]),
.pulse_out (hps_cold_reset)
);
defparam pulse_cold_reset.PULSE_EXT = 6;
defparam pulse_cold_reset.EDGE_TYPE = 1;
defparam pulse_cold_reset.IGNORE_RST_WHILE_BUSY = 1;

altera_edge_detector pulse_warm_reset (
.clk       (fpga_clk_50),
.rst_n     (hps_fpga_reset_n),
.signal_in (hps_reset_req[1]),
.pulse_out (hps_warm_reset)
);
defparam pulse_warm_reset.PULSE_EXT = 2;
defparam pulse_warm_reset.EDGE_TYPE = 1;
defparam pulse_warm_reset.IGNORE_RST_WHILE_BUSY = 1;

altera_edge_detector pulse_debug_reset (
.clk       (fpga_clk_50),
.rst_n     (hps_fpga_reset_n),
.signal_in (hps_reset_req[2]),
.pulse_out (hps_debug_reset)
);
defparam pulse_debug_reset.PULSE_EXT = 32;
defparam pulse_debug_reset.EDGE_TYPE = 1;
defparam pulse_debug_reset.IGNORE_RST_WHILE_BUSY = 1;

reg [25:0] counter;
reg  led_level;
always @	(posedge fpga_clk_50 or negedge hps_fpga_reset_n)
begin
if(~hps_fpga_reset_n)
begin
        counter<=0;
        led_level<=0;
end

else if(counter==24999999)
    begin
        counter<=0;
        led_level<=~led_level;
    end
else
        counter<=counter+1'b1;
end
// ----------------------------------------------------------------------//
// 							Synthesizer:
// ----------------------------------------------------------------------//

parameter VOICES = 32;
//parameter VOICES = 64;
//parameter VOICES = 4;
parameter V_OSC = 8;	// number of oscilators pr. voice.
//parameter V_OSC = 4;	// number of oscilators pr. voice.

parameter O_ENVS = 2;	// number of envelope generators pr. oscilator.
parameter V_ENVS = V_OSC * O_ENVS;	// number of envelope generators  pr. voice.

    assign GPIO_1[9] =	AUD_XCK;        // violet
    assign GPIO_1[7] =	AUD_BCLK;       // orange
    assign GPIO_1[5] =	AUD_DACLRCK;    // green
    assign GPIO_1[3] =	AUD_DACDAT;     // white


//	assign aud_mute = user_dipsw_fpga[2];

/////// LED Display ////////
    assign LED[7:1] = ~voice_free[6:0];
    wire  [VOICES-1:0]	keys_on;
    wire  [VOICES-1:0]	voice_free;

    reg [7:0]   delay_1;
    wire        iRST_n;
    wire        run;
    assign GPIO_1[0] = run;

synthesizer #(.VOICES(VOICES),.V_OSC(V_OSC),.V_ENVS(V_ENVS))  synthesizer_inst(
    .CLOCK_50               (fpga_clk_50) ,
    .AUDIO_CLK              ( AUDIO_CLK ),             // input
    .reset_n                (hps_fpga_reset_n),
    .trig                   (AUD_DACLRCK),
    .MIDI_Rx_DAT            ( midi_rxd ) ,    // input  MIDI_DAT_sig (inverted due to inverter in rs232 chip)
    .midi_txd               ( midi_txd ),		// output midi transmit signal (inverted due to inverter in rs232 chip)
    .button                 ( KEY ),            //  Button[3:0]
`ifdef _Synth
    .lsound_out             (lsound_out[31:8] ),      //  Audio Raw Data Low
    .rsound_out             (rsound_out[31:8] ),      //  Audio Raw Data high
    .xxxx_zero              (xxxx_zero),                // output  cycle complete signag
`endif
    .keys_on                (keys_on),				//  LED [7:0]
    .voice_free             (voice_free) , 			//  Red LED [4:1]
    .io_reset_n             (hps_fpga_reset_n) ,	// input  io_reset_sig
    .cpu_read               (cpu_read) ,	// input  cpu_read_sig
    .cpu_write              (cpu_write) ,	// input  cpu_write_sig
    .chipselect             (cpu_chip_sel) ,	// input  chipselect_sig
    .address                (cpu_adr) ,	// input [9:0] address_sig
    .writedata              (cpu_data_out) ,	// input [31:0] writedata_sig
    .readdata               (cpu_data_in), 	// output [31:0] readdata_sig
    .socmidi_read           (socmidi_read) ,	// input  cpu_read_sig
    .socmidi_write          (socmidi_write) ,	// input  cpu_write_sig
    .socmidi_cs             (socmidi_chip_sel) ,	// input  chipselect_sig
    .socmidi_addr           (socmidi_addr) ,	// input [9:0] address_sig
    .socmidi_data_out       (socmidi_data_out) ,	// input [31:0] writedata_sig
    .socmidi_data_in        (socmidi_data_in), 	// output [31:0] readdata_sig
    .run                    (run),
    .switch3                (SW[2])
);

endmodule
