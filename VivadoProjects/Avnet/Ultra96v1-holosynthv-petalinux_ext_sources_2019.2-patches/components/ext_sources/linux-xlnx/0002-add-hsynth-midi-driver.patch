From a01e7fed942d9725b46193266f72f25946392b55 Mon Sep 17 00:00:00 2001
From: Michael Brown <producer@holotronic.dk>
Date: Sun, 19 Apr 2020 00:48:25 +0200
Subject: [PATCH 2/5] add hsynth midi driver

Signed-off-by: Michael Brown <producer@holotronic.dk>
---
 .../boot/dts/xilinx/zynqmp-zcu100-revC.dts    |   7 +
 arch/arm64/configs/xilinx_zynqmp_defconfig    |   1 +
 sound/soc/Kconfig                             |   3 +-
 sound/soc/Makefile                            |   1 +
 sound/soc/socsynth/Kconfig                    |   2 +
 sound/soc/socsynth/Makefile                   |   2 +
 sound/soc/socsynth/hsynth-midi.c              | 296 ++++++++++++++++++
 7 files changed, 311 insertions(+), 1 deletion(-)
 create mode 100644 sound/soc/socsynth/Kconfig
 create mode 100644 sound/soc/socsynth/Makefile
 create mode 100644 sound/soc/socsynth/hsynth-midi.c

diff --git a/arch/arm64/boot/dts/xilinx/zynqmp-zcu100-revC.dts b/arch/arm64/boot/dts/xilinx/zynqmp-zcu100-revC.dts
index 6b93bc6d7f0b..f27e1615ee57 100644
--- a/arch/arm64/boot/dts/xilinx/zynqmp-zcu100-revC.dts
+++ b/arch/arm64/boot/dts/xilinx/zynqmp-zcu100-revC.dts
@@ -42,6 +42,13 @@
 		stdout-path = "serial0:115200n8";
 	};
 
+    socmidi@0xa00000000 {
+		compatible = "holotr,socsynth-midi";
+        reg = <0x0 0xA0000000 0x0 0x00010>;
+		address_width = <3>;   /* embeddedsw.dts.params.address_width type NUMBER */
+		data_width = <8>;      /* embeddedsw.dts.params.data_width type NUMBER */
+	};
+
 	uio-holosynth@0xa0040000 {
         compatible = "uio_pdrv_genirq";
         reg = <0x0 0xA0040000 0x0 0x10000>;
diff --git a/arch/arm64/configs/xilinx_zynqmp_defconfig b/arch/arm64/configs/xilinx_zynqmp_defconfig
index dca3b33687c2..93bb33a8b5f0 100644
--- a/arch/arm64/configs/xilinx_zynqmp_defconfig
+++ b/arch/arm64/configs/xilinx_zynqmp_defconfig
@@ -394,3 +394,4 @@ CONFIG_DEBUG_FS=y
 CONFIG_MAGIC_SYSRQ=y
 # CONFIG_SCHED_DEBUG is not set
 # CONFIG_FTRACE is not set
+CONFIG_SND_SOC_HSYNTH_MIDI=m
diff --git a/sound/soc/Kconfig b/sound/soc/Kconfig
index d21659f5a7e2..6986862e223c 100644
--- a/sound/soc/Kconfig
+++ b/sound/soc/Kconfig
@@ -13,7 +13,7 @@ menuconfig SND_SOC
 
 	  If you want ASoC support, you should say Y here and also to the
 	  specific driver for your SoC platform below.
-	  
+
 	  ASoC provides power efficient ALSA support for embedded battery powered
 	  SoC based systems like PDA's, Phones and Personal Media Players.
 
@@ -65,6 +65,7 @@ source "sound/soc/rockchip/Kconfig"
 source "sound/soc/samsung/Kconfig"
 source "sound/soc/sh/Kconfig"
 source "sound/soc/sirf/Kconfig"
+source "sound/soc/socsynth/Kconfig"
 source "sound/soc/spear/Kconfig"
 source "sound/soc/sti/Kconfig"
 source "sound/soc/stm/Kconfig"
diff --git a/sound/soc/Makefile b/sound/soc/Makefile
index aff7b1989436..09ca6d5be7c9 100644
--- a/sound/soc/Makefile
+++ b/sound/soc/Makefile
@@ -49,6 +49,7 @@ obj-$(CONFIG_SND_SOC)	+= rockchip/
 obj-$(CONFIG_SND_SOC)	+= samsung/
 obj-$(CONFIG_SND_SOC)	+= sh/
 obj-$(CONFIG_SND_SOC)	+= sirf/
+obj-$(CONFIG_SND_SOC)	+= socsynth/
 obj-$(CONFIG_SND_SOC)	+= spear/
 obj-$(CONFIG_SND_SOC)	+= sti/
 obj-$(CONFIG_SND_SOC)	+= stm/
diff --git a/sound/soc/socsynth/Kconfig b/sound/soc/socsynth/Kconfig
new file mode 100644
index 000000000000..457edbfaa620
--- /dev/null
+++ b/sound/soc/socsynth/Kconfig
@@ -0,0 +1,2 @@
+config SND_SOC_HSYNTH_MIDI
+       tristate "Holosynth MIDI support"
diff --git a/sound/soc/socsynth/Makefile b/sound/soc/socsynth/Makefile
new file mode 100644
index 000000000000..126f34202ac8
--- /dev/null
+++ b/sound/soc/socsynth/Makefile
@@ -0,0 +1,2 @@
+snd-soc-hsynth-midi-objs := hsynth-midi.o
+obj-$(CONFIG_SND_SOC_HSYNTH_MIDI) += snd-soc-hsynth-midi.o
diff --git a/sound/soc/socsynth/hsynth-midi.c b/sound/soc/socsynth/hsynth-midi.c
new file mode 100644
index 000000000000..676631e7b4b6
--- /dev/null
+++ b/sound/soc/socsynth/hsynth-midi.c
@@ -0,0 +1,296 @@
+/*
+* hsynth-soc -- SoC audio ( midi for Altera SoC boards
+* Author: Michael Brown the-snowwhite <producer@holotronic.dk>
+*
+* Based on de1-soc-wm8731 by
+*  B. Steinsbo <bsteinsbo@gmail.com>
+*
+* Licensed under the GPL-2.
+*/
+
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/clk.h>
+#include <linux/platform_device.h>
+#include <linux/of.h>
+#include <linux/uaccess.h>
+#include <linux/ioport.h>
+#include <linux/io.h>
+
+#include <sound/core.h>
+#include <sound/seq_kernel.h>
+#include <sound/rawmidi.h>
+#include <sound/initval.h>
+// #include <sound/pcm.h>
+// #include <sound/pcm_params.h>
+#include <sound/soc.h>
+
+#define SYNTHSOCSOUND_LOG_PREFIX "synthsound: "
+
+#define midi_ins 0
+#define midi_outs 1
+
+#define MIDIREG_BASE 0xa0000000
+#define MIDIREG_SIZE PAGE_SIZE
+#define MIDIREG_OFFSET 0x00000
+
+#define printe(...) pr_err(SYNTHSOCSOUND_LOG_PREFIX __VA_ARGS__)
+
+static int snd_socmidi_open(struct snd_rawmidi_substream *substream);
+static int snd_socmidi_close(struct snd_rawmidi_substream *substream);
+static int hmidi_card_probe(struct snd_soc_card *card);
+static int hmidi_card_remove(struct snd_soc_card *card);
+static void snd_socmidi_transmit(unsigned char data);
+static void snd_socmidi_output_trigger(struct snd_rawmidi_substream *substream, int);
+static int hsound_midi_init(struct snd_card *card);
+
+void *midireg_mem;
+
+static int snd_socmidi_open(struct snd_rawmidi_substream *substream)
+{
+    return 0;
+}
+
+static int snd_socmidi_close(struct snd_rawmidi_substream *substream)
+{
+    return 0;
+}
+
+static int hmidi_card_probe(struct snd_soc_card *card)
+{
+    int err;
+
+    err = hsound_midi_init(card->snd_card);
+
+    if (err < 0) {
+//		dev_dbg(&pdev->dev,"hsound_midi_init failed: %d\n", err);
+        return err;
+    }
+
+    return 0;
+}
+
+static int hmidi_card_remove(struct snd_soc_card *card)
+{
+    return 0;
+}
+
+static void snd_socmidi_transmit(unsigned char data){
+
+    iowrite8(data, midireg_mem);
+
+}
+
+static void snd_socmidi_output_trigger(struct snd_rawmidi_substream *substream, int up) {
+
+    if (!up)
+        return;
+
+    while (1) {
+        unsigned char data;
+        if (snd_rawmidi_transmit(substream, &data, 1) != 1)
+            break; /* no more data */
+        snd_socmidi_transmit(data);
+    }
+}
+
+static struct snd_rawmidi *g_rmidi;
+
+static struct snd_rawmidi_ops snd_socmidi_output_ops = {
+    .open = snd_socmidi_open,
+    .close = snd_socmidi_close,
+    .trigger = snd_socmidi_output_trigger,
+};
+
+static void pisnd_get_port_info(struct snd_rawmidi *rmidi, int number, struct snd_seq_port_info *seq_port_info)
+{
+    seq_port_info->type =
+        SNDRV_SEQ_PORT_TYPE_MIDI_GENERIC |
+        SNDRV_SEQ_PORT_TYPE_HARDWARE |
+        SNDRV_SEQ_PORT_TYPE_PORT;
+    seq_port_info->midi_voices = 0;
+}
+
+static struct snd_rawmidi_global_ops hsnd_global_ops = {.get_port_info = pisnd_get_port_info, };
+
+static int hsound_midi_init(struct snd_card *card)
+{
+    int err;
+struct resource *res;
+
+    err = snd_rawmidi_new(card, "SocMIDI", 0, midi_outs, midi_ins, &g_rmidi);
+
+    if (err < 0) {
+        printe("snd_rawmidi_new failed: %d\n", err);
+        return err;
+    }
+
+    strcpy(g_rmidi->name, "Holosynth MIDI ");
+//	strcat(g_rmidi->name, pisnd_spi_get_serial());
+
+    g_rmidi->info_flags = SNDRV_RAWMIDI_INFO_OUTPUT;
+    // rmidi->info_flags = SNDRV_RAWMIDI_INFO_OUTPUT |
+    //                     SNDRV_RAWMIDI_INFO_INPUT |
+    //                     SNDRV_RAWMIDI_INFO_DUPLEX;
+
+    g_rmidi->ops = &hsnd_global_ops;
+
+    g_rmidi->private_data = (void *)0;
+
+    snd_rawmidi_set_ops(g_rmidi, SNDRV_RAWMIDI_STREAM_OUTPUT, &snd_socmidi_output_ops);
+//    snd_rawmidi_set_ops(rmidi, SNDRV_RAWMIDI_STREAM_INPUT, &snd_socmidi_input_ops);
+
+    res = request_mem_region((MIDIREG_BASE + MIDIREG_OFFSET), MIDIREG_SIZE, "MIDIREG");
+    if (res == NULL) {
+        return -EBUSY;
+    }
+
+    midireg_mem = ioremap((MIDIREG_BASE + MIDIREG_OFFSET), MIDIREG_SIZE);
+    if (midireg_mem == NULL) {
+        release_mem_region(MIDIREG_BASE, MIDIREG_SIZE);
+        return -EFAULT;
+    }
+
+    return 0;
+}
+
+/*
+static const struct snd_soc_dapm_widget soc_dapm_widgets[] = {
+    SND_SOC_DAPM_LINE("Hsynth in", NULL),
+};
+
+static const struct snd_soc_dapm_route intercon[] = {
+    {"PDM_DAT", NULL, "Hsynth in"},
+//	{"Mic Bias", NULL, "Microphone Jack"},
+//	{"LLINEIN", NULL, "Line In Jack"},
+//	{"RLINEIN", NULL, "Line In Jack"},
+//	{"Line Out Jack", NULL, "LOUT"},
+//	{"Line Out Jack", NULL, "ROUT"},
+//	{"Headphone Jack", NULL, "LHPOUT"},
+//	{"Headphone Jack", NULL, "RHPOUT"},
+};
+
+static int soc_hsynth_init(struct snd_soc_pcm_runtime *rtd)
+{
+//	struct snd_soc_dai *codec_dai = rtd->codec_dai;
+    struct snd_soc_dai *cpu_dai = rtd->cpu_dai;
+    struct device *dev = rtd->card->dev;
+    unsigned int fmt;
+    int ret;
+
+    dev_dbg(dev, "init\n");
+
+    fmt = SND_SOC_DAIFMT_I2S | SND_SOC_DAIFMT_NB_NF |
+        SND_SOC_DAIFMT_CBS_CFS;
+
+    // set cpu DAI configuration
+    ret = snd_soc_dai_set_fmt(cpu_dai, fmt);
+    if (ret < 0)
+        return ret;
+
+
+    return 0;
+}
+
+static struct snd_soc_dai_link hsynth_soc_dai = {
+    .name = "HSYNTH",
+    .stream_name = "HSYNTH PCM",
+    .cpu_dai_name = "ff200000.dmalink",
+    .codec_dai_name = "hsynth7002-hifi",
+    .init = soc_hsynth_init,
+    .platform_name = "socsynth",
+    .codec_name = "hsynth7002.hsynth",
+//	.ops = &hsynth_soc_ops,
+};
+*/
+static struct snd_soc_card snd_soc_hsynth_soc = {
+    .name = "HSYNTH-MIDI",
+    .owner = THIS_MODULE,
+//     .dai_link = &hsynth_soc_dai,
+//     .num_links = 1,
+
+    .probe        = hmidi_card_probe,
+    .remove       = hmidi_card_remove,
+
+//    .dapm_widgets = soc_dapm_widgets,
+//    .num_dapm_widgets = ARRAY_SIZE(soc_dapm_widgets),
+//    .dapm_routes = intercon,
+//    .num_dapm_routes = ARRAY_SIZE(intercon),
+};
+
+static int hsynth_soc_audio_probe(struct platform_device *pdev)
+{
+//         struct device_node *np = pdev->dev.of_node;
+//     struct device_node *codec_np, *cpu_np;
+    struct snd_soc_card *card = &snd_soc_hsynth_soc;
+    int ret;
+//
+//     if (!np) {
+//         return -ENODEV;
+//     }
+//
+    card->dev = &pdev->dev;
+//
+//
+//     /* Parse codec info */
+//     hsynth_soc_dai.codec_name = NULL;
+//     codec_np = of_parse_phandle(np, "audio-codec", 0);
+//     if (!codec_np) {
+//         dev_err(&pdev->dev, "codec info missing\n");
+//         return -EINVAL;
+//     }
+//     hsynth_soc_dai.codec_of_node = codec_np;
+//
+//     /* Parse dai and platform info */
+//     hsynth_soc_dai.cpu_dai_name = NULL;
+//     hsynth_soc_dai.platform_name = NULL;
+//     cpu_np = of_parse_phandle(np, "dmalink-controller", 0);
+//     if (!cpu_np) {
+//         dev_err(&pdev->dev, "dai and pcm info missing\n");
+//         return -EINVAL;
+//     }
+//     hsynth_soc_dai.cpu_of_node = cpu_np;
+//     hsynth_soc_dai.platform_of_node = cpu_np;
+//
+//     of_node_put(codec_np);
+//     of_node_put(cpu_np);
+//
+    ret = snd_soc_register_card(card);
+    if (ret) {
+        dev_err(&pdev->dev, "snd_soc_register_card() failed\n");
+    }
+
+    return ret;
+}
+
+static int soc_audio_remove(struct platform_device *pdev)
+{
+    struct snd_soc_card *card = platform_get_drvdata(pdev);
+
+     snd_soc_unregister_card(card);
+
+    return 0;
+}
+
+static const struct of_device_id soc_hsynth_dt_ids[] = {
+    { .compatible = "holotr,socsynth-midi", },
+    { }
+};
+MODULE_DEVICE_TABLE(of, soc_hsynth_dt_ids);
+
+static struct platform_driver soc_audio_driver = {
+    .driver = {
+        .name	= "soc-synth-midi",
+        .owner	= THIS_MODULE,
+        .of_match_table = of_match_ptr(soc_hsynth_dt_ids),
+    },
+    .probe	= hsynth_soc_audio_probe,
+    .remove	= soc_audio_remove,
+};
+
+module_platform_driver(soc_audio_driver);
+
+/* Module information */
+MODULE_AUTHOR("Michael Brown (the-snowwhite) <producer@holotronic.dk>");
+MODULE_DESCRIPTION("ALSA SoC HSYNTH-MIDI");
+MODULE_LICENSE("GPL");
-- 
2.25.1

